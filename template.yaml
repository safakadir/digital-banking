AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Digital Banking Platform with Event-Driven Microservices

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Deployment environment

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 256
    Architectures:
      - x86_64
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName
        POWERTOOLS_LOGGER_LOG_EVENT: 'true'
        POWERTOOLS_LOGGER_SAMPLE_RATE: 1
        POWERTOOLS_METRICS_NAMESPACE: !Ref AWS::StackName
        ENV: !Ref Env

Resources:
  # Cognito User Pool for Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "DigitalBankingUserPool-${Env}"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "DigitalBankingClient-${Env}"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # DynamoDB Tables
  # Ledger Service Tables
  LedgerSvcLedgerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "LedgerSvc-LedgerTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  LedgerSvcLedgerEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "LedgerSvc-LedgerEventsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Accounts Service Tables
  AccountsSvcAccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AccountsSvc-AccountsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  AccountsSvcAccountsEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AccountsSvc-AccountsEventsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Query Service Tables
  QuerySvcTransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-TransactionsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: account_id
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE

  QuerySvcBalancesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-BalancesTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: account_id
          KeyType: HASH

  QuerySvcAccountsProjectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-AccountsProjectionTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Banking Service Tables
  BankingSvcOperationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-OperationsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
          
  BankingSvcAccountsProjectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-AccountsProjectionTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  BankingSvcOperationsCommandsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-OperationsCommandsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # SQS Queues
  DepositCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "deposit-command-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DepositCommandDLQ.Arn
        maxReceiveCount: 3

  DepositCommandDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "deposit-command-dlq-${Env}"

  WithdrawCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "withdraw-command-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WithdrawCommandDLQ.Arn
        maxReceiveCount: 3

  WithdrawCommandDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "withdraw-command-dlq-${Env}"

  EventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "events-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EventsDLQ.Arn
        maxReceiveCount: 3

  EventsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "events-dlq-${Env}"

  # Lambda Functions
  # Ledger Service Lambda
  LedgerCommandHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/ledger/dist
      Handler: command.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LedgerSvcLedgerTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LedgerSvcLedgerEventsTable
        - SQSPollerPolicy:
            QueueName: !GetAtt DepositCommandQueue.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt WithdrawCommandQueue.QueueName
      Events:
        DepositCommandEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DepositCommandQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
        WithdrawCommandEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WithdrawCommandQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

  # Accounts Service Lambda
  AccountsHttpHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/accounts/dist
      Handler: http.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsSvcAccountsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsSvcAccountsEventsTable
      Events:
        CreateAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts
            Method: post
        CloseAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts/{account_id}/close
            Method: post
        GetAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts/{account_id}
            Method: get
        GetAccounts:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts
            Method: get

  # Query Service Lambdas
  QueryHttpHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/query/dist
      Handler: http.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcTransactionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcBalancesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcAccountsProjectionTable
      Events:
        GetTransactions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /transactions/{account_id}
            Method: get
        GetBalance:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /balances/{account_id}
            Method: get
        GetBalances:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /balances
            Method: get
            
  QueryEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/query/dist
      Handler: event.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcTransactionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcBalancesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcAccountsProjectionTable
        - SQSPollerPolicy:
            QueueName: !GetAtt EventsQueue.QueueName
      Events:
        EventsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventsQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

  # Banking Service Lambdas
  BankingHttpHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/banking/dist
      Handler: http.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOperationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOperationsCommandsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcAccountsProjectionTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DepositCommandQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt WithdrawCommandQueue.QueueName
      Events:
        Deposit:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /deposit
            Method: post
        Withdraw:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /withdraw
            Method: post
        GetOperationStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /operation-status/{operation_id}
            Method: get
            
  BankingEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/banking/dist
      Handler: event.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOperationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOperationsCommandsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcAccountsProjectionTable
        - SQSPollerPolicy:
            QueueName: !GetAtt EventsQueue.QueueName
      Events:
        EventsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventsQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
