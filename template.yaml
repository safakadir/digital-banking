AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Digital Banking Platform with Event-Driven Microservices

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Deployment environment

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs22.x
    MemorySize: 256
    Architectures:
      - x86_64
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName
        POWERTOOLS_LOGGER_LOG_EVENT: 'true'
        POWERTOOLS_LOGGER_SAMPLE_RATE: 1
        POWERTOOLS_METRICS_NAMESPACE: !Ref AWS::StackName
        ENV: !Ref Env

Resources:
  # Cognito User Pool for Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "DigitalBankingUserPool-${Env}"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "DigitalBankingClient-${Env}"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # DynamoDB Tables
  # Inbox Tables for Message Deduplication
  LedgerSvcCommandFnInboxTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "LedgerSvc-CommandFn-Inbox-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
        
  BankingSvcEventFnInboxTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-InboxTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
        
  QuerySvcEventFnInboxTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-EventFn-Inbox-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
        
  # Ledger Service Tables
  LedgerSvcLedgerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "LedgerSvc-LedgerTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  LedgerSvcOutboxTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "LedgerSvc-OutboxTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Accounts Service Tables
  AccountsSvcAccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AccountsSvc-AccountsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AccountsSvcOutboxTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AccountsSvc-OutboxTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Query Service Tables
  QuerySvcTransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-TransactionsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: account_id
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE

  QuerySvcBalancesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-BalancesTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: account_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: account_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  QuerySvcAccountsProjectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "QuerySvc-AccountsProjectionTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Banking Service Tables
  BankingSvcOperationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-OperationsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
          
  BankingSvcAccountsProjectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-AccountsProjectionTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  BankingSvcOutboxTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BankingSvc-OutboxTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # SQS Queues for Commands
  DepositCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "deposit-command-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DepositCommandDLQ.Arn
        maxReceiveCount: 3

  DepositCommandDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "deposit-command-dlq-${Env}"

  WithdrawCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "withdraw-command-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WithdrawCommandDLQ.Arn
        maxReceiveCount: 3

  WithdrawCommandDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "withdraw-command-dlq-${Env}"

  # SNS Topics for Events
  LedgerEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "ledger-event-${Env}"

  AccountEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "account-event-${Env}"
      

  # SQS Queues for SNS Subscriptions
  BankingSvcEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "banking-svc-event-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BankingSvcEventDLQ.Arn
        maxReceiveCount: 3

  BankingSvcEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "banking-svc-event-dlq-${Env}"

  QuerySvcEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "query-svc-event-queue-${Env}"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QuerySvcEventDLQ.Arn
        maxReceiveCount: 3

  QuerySvcEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "query-svc-event-dlq-${Env}"
      
  # SNS Subscriptions
  BankingSvcQueueLedgerEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref LedgerEventTopic
      Protocol: sqs
      Endpoint: !GetAtt BankingSvcEventQueue.Arn
      RawMessageDelivery: true
      
  BankingSvcQueueAccountsEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AccountEventTopic
      Protocol: sqs
      Endpoint: !GetAtt BankingSvcEventQueue.Arn
      RawMessageDelivery: true
      
      
  QuerySvcQueueLedgerEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref LedgerEventTopic
      Protocol: sqs
      Endpoint: !GetAtt QuerySvcEventQueue.Arn
      RawMessageDelivery: true
      
  QuerySvcQueueAccountsEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AccountEventTopic
      Protocol: sqs
      Endpoint: !GetAtt QuerySvcEventQueue.Arn
      RawMessageDelivery: true
      
      
  # SQS Queue Policies for SNS
  BankingSvcEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref BankingSvcEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt BankingSvcEventQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !Ref LedgerEventTopic
                  - !Ref AccountEventTopic
                  
  QuerySvcEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QuerySvcEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt QuerySvcEventQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !Ref LedgerEventTopic
                  - !Ref AccountEventTopic

  # Lambda Functions
  # Ledger Service Lambda
  LedgerSvcCommandFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/ledger/dist
      Handler: index.commandFunctionHandler
      Environment:
        Variables:
          INBOX_TABLE: !Ref LedgerSvcCommandFnInboxTable
          LEDGER_TABLE_NAME: !Ref LedgerSvcLedgerTable
          OUTBOX_TABLE_NAME: !Ref LedgerSvcOutboxTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LedgerSvcLedgerTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LedgerSvcOutboxTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LedgerSvcCommandFnInboxTable
        - SQSPollerPolicy:
            QueueName: !GetAtt DepositCommandQueue.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt WithdrawCommandQueue.QueueName
      Events:
        DepositCommandEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DepositCommandQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
        WithdrawCommandEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WithdrawCommandQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

  # Accounts Service Lambda
  AccountsSvcApiFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/accounts/dist
      Handler: index.apiFunctionHandler
      Environment:
        Variables:
          ACCOUNTS_TABLE_NAME: !Ref AccountsSvcAccountsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsSvcAccountsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsSvcOutboxTable
      Events:
        CreateAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts
            Method: post
        CloseAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts/{account_id}/close
            Method: post
        GetAccount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts/{account_id}
            Method: get
        GetAccounts:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /accounts
            Method: get

  # Query Service Lambdas
  QuerySvcApiFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/query/dist
      Handler: index.apiFunctionHandler
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref QuerySvcTransactionsTable
          BALANCES_TABLE_NAME: !Ref QuerySvcBalancesTable
          ACCOUNTS_PROJECTION_TABLE_NAME: !Ref QuerySvcAccountsProjectionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcTransactionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcBalancesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcAccountsProjectionTable
      Events:
        GetTransactions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /transactions/{account_id}
            Method: get
        GetBalance:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /balances/{account_id}
            Method: get
        GetBalances:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /balances
            Method: get
            
  QuerySvcEventFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/query/dist
      Handler: index.eventFunctionHandler
      Environment:
        Variables:
          INBOX_TABLE: !Ref QuerySvcEventFnInboxTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcTransactionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcBalancesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcAccountsProjectionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref QuerySvcEventFnInboxTable
        - SQSPollerPolicy:
            QueueName: !GetAtt QuerySvcEventQueue.QueueName
      Events:
        QueryEventsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt QuerySvcEventQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

  # Banking Service Lambdas
  BankingSvcApiFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/banking/dist
      Handler: index.apiFunctionHandler
      Environment:
        Variables:
          OPERATIONS_TABLE_NAME: !Ref BankingSvcOperationsTable
          OUTBOX_TABLE_NAME: !Ref BankingSvcOutboxTable
          ACCOUNTS_PROJECTION_TABLE_NAME: !Ref BankingSvcAccountsProjectionTable
          DEPOSIT_COMMAND_QUEUE_URL: !Ref DepositCommandQueue
          WITHDRAW_COMMAND_QUEUE_URL: !Ref WithdrawCommandQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOperationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOutboxTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcAccountsProjectionTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DepositCommandQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt WithdrawCommandQueue.QueueName
      Events:
        Deposit:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /deposit
            Method: post
        Withdraw:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /withdraw
            Method: post
        GetOperationStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /operation-status/{operation_id}
            Method: get
            
  BankingSvcEventFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/banking/dist
      Handler: index.eventFunctionHandler
      Environment:
        Variables:
          BANKING_INBOX_TABLE: !Ref BankingSvcEventFnInboxTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOperationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcOutboxTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcAccountsProjectionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BankingSvcEventFnInboxTable
        - SQSPollerPolicy:
            QueueName: !GetAtt BankingSvcEventQueue.QueueName
      Events:
        BankingEventsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BankingSvcEventQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

  # EventBridge Pipes for DynamoDB Streams to SNS
  LedgerOutboxToSNSPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub "ledger-outbox-to-sns-${Env}"
      RoleArn: !GetAtt PipeExecutionRole.Arn
      Source: !GetAtt LedgerSvcOutboxTable.StreamArn
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 10
          DeadLetterConfig:
            Arn: !GetAtt PipeDLQ.Arn
          MaximumBatchingWindowInSeconds: 1
          # Only process new items
      Target: !Ref LedgerEventTopic
      TargetParameters:
        InputTemplate: |
          {
            "id": <$.dynamodb.NewImage.id.S>,
            "timestamp": <$.dynamodb.NewImage.timestamp.S>,
            "eventType": <$.dynamodb.NewImage.eventType.S>,
            "eventData": <$.dynamodb.NewImage.eventData.M>
          }
        
  AccountsOutboxToSNSPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub "accounts-outbox-to-sns-${Env}"
      RoleArn: !GetAtt PipeExecutionRole.Arn
      Source: !GetAtt AccountsSvcOutboxTable.StreamArn
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 10
          DeadLetterConfig:
            Arn: !GetAtt PipeDLQ.Arn
          MaximumBatchingWindowInSeconds: 1
          # Only process new items
      Target: !Ref AccountEventTopic
      TargetParameters:
        InputTemplate: |
          {
            "id": <$.dynamodb.NewImage.id.S>,
            "timestamp": <$.dynamodb.NewImage.timestamp.S>,
            "eventType": <$.dynamodb.NewImage.eventType.S>,
            "eventData": <$.dynamodb.NewImage.eventData.M>
          }
          
  BankingOutboxToDepositCommandQueuePipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub "banking-outbox-to-deposit-command-${Env}"
      RoleArn: !GetAtt PipeExecutionRole.Arn
      Source: !GetAtt BankingSvcOutboxTable.StreamArn
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 10
          DeadLetterConfig:
            Arn: !GetAtt PipeDLQ.Arn
          MaximumBatchingWindowInSeconds: 1
          # Only process deposit command events
      Target: !GetAtt DepositCommandQueue.Arn
      TargetParameters:
        InputTemplate: |
          {
            "id": <$.dynamodb.NewImage.id.S>,
            "timestamp": <$.dynamodb.NewImage.timestamp.S>,
            "eventType": <$.dynamodb.NewImage.eventType.S>,
            "eventData": <$.dynamodb.NewImage.eventData.M>
          }
          
  BankingOutboxToWithdrawCommandQueuePipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub "banking-outbox-to-withdraw-command-${Env}"
      RoleArn: !GetAtt PipeExecutionRole.Arn
      Source: !GetAtt BankingSvcOutboxTable.StreamArn
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 10
          DeadLetterConfig:
            Arn: !GetAtt PipeDLQ.Arn
          MaximumBatchingWindowInSeconds: 1
          # Only process withdraw command events
      Target: !GetAtt WithdrawCommandQueue.Arn
      TargetParameters:
        InputTemplate: |
          {
            "id": <$.dynamodb.NewImage.id.S>,
            "timestamp": <$.dynamodb.NewImage.timestamp.S>,
            "eventType": <$.dynamodb.NewImage.eventType.S>,
            "eventData": <$.dynamodb.NewImage.eventData.M>
          }
          
  # EventBridge Pipes DLQ
  PipeDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "pipe-dlq-${Env}"
      
  # IAM Role for EventBridge Pipes
  PipeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pipes.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEventBridgePipesFullAccess
      Policies:
        - PolicyName: DynamoDBStreamAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource:
                  - !GetAtt LedgerSvcOutboxTable.StreamArn
                  - !GetAtt AccountsSvcOutboxTable.StreamArn
                  - !GetAtt BankingSvcOutboxTable.StreamArn
        - PolicyName: SNSPublishAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource:
                  - !Ref LedgerEventTopic
                  - !Ref AccountEventTopic
        - PolicyName: SQSSendMessageAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: 
                  - !GetAtt PipeDLQ.Arn
                  - !GetAtt DepositCommandQueue.Arn
                  - !GetAtt WithdrawCommandQueue.Arn

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Env}/"
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
